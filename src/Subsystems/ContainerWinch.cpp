// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "ContainerWinch.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

ContainerWinch::ContainerWinch() : Subsystem("ContainerWinch") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	containerSensor1 = RobotMap::containerWinchContainerSensor1;
	containerSensor2 = RobotMap::containerWinchContainerSensor2;
	containerSenser3 = RobotMap::containerWinchContainerSenser3;
	containerPull1 = RobotMap::containerWinchContainerPull1;
	containerPull2 = RobotMap::containerWinchContainerPull2;
	containerPull3 = RobotMap::containerWinchContainerPull3;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void ContainerWinch::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.


void ContainerWinch::SetWinch(int winchNumber, float output) {
	switch (winchNumber) {
		case 1:


				containerPull1->Set(output);

			break;
		case 2:


				containerPull2->Set(output);


			break;
		case 3:

				containerPull3->Set(output);

			break;
		default:
			containerPull1->Set(0);
			containerPull2->Set(0);
			containerPull3->Set(0);
			break;
	}
}
bool ContainerWinch::GetContainer(int containerNumber) {
	switch (containerNumber) {
		case 1:
			return containerSensor1->Get();
			break;
		case 2:
			return containerSensor2->Get();
			break;
		case 3:
			return containerSensor2->Get();
			break;
		default:
			return true;
	}
}
