// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef _ROBOT_H
#define _ROBOT_H

#include "WPILib.h"
#include "Commands/Command.h"
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/AutonomousCommand.h"
#include "Subsystems/ClawPID.h"
#include "Subsystems/ContainerWinch.h"
#include "Subsystems/Drivetrain.h"
#include "Subsystems/IntakeSystem.h"
#include "Subsystems/LEDindicator.h"
#include "Subsystems/ContainerGrabber.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "OI.h"

#include "Triggers/LiftDown.h"
#include "Commands/ResetLevelEncoder.h"

class Robot : public IterativeRobot {
public:
	bool prevCenter;
	bool prevprevCentered;
	bool intaking;
	static bool centered;

	static bool servoSet;
	static bool servosMove;

	Command *autonomousCommand;
	static OI *oi;
	LiveWindow *lw;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	static Drivetrain* drivetrain;
	static ClawPID* clawPID;
	static ContainerWinch* containerWinch;
	static IntakeSystem* intakeSystem;
	static LEDindicator* lEDindicator;
	static ContainerGrabber* containerGrabber;

	static std::shared_ptr<frc::Compressor> compressor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

//	IMAQdxSession session;
//	Image *frame;
//	IMAQdxError imaqError;

	frc::SendableChooser<frc::Command*>* chooser;

	PowerDistributionPanel pdp;

	LiftDown liftDown;

	virtual void RobotInit();
	virtual void DisabledInit();
	virtual void DisabledPeriodic();
	virtual void AutonomousInit();
	virtual void AutonomousPeriodic();
	virtual void TeleopInit();
	virtual void TeleopPeriodic();
	virtual void TestPeriodic();
	void SafetyCheck(int threshold);
};
#endif
