// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
frc::Encoder* RobotMap::drivetrainrearRight = NULL;
frc::Encoder* RobotMap::drivetrainrearLeft = NULL;
frc::Encoder* RobotMap::drivetrainfrontLeft = NULL;
frc::Encoder* RobotMap::drivetrainfrontRight = NULL;
frc::Gyro* RobotMap::drivetrainGyro1 = NULL;
frc::DigitalInput* RobotMap::clawPIDBottom = NULL;
frc::DigitalInput* RobotMap::clawPIDTop = NULL;
frc::Encoder* RobotMap::clawPIDHeightEnccoder = NULL;
frc::Victor* RobotMap::containerWinchContainerPull1 = NULL;
frc::Victor* RobotMap::containerWinchContainerPull2 = NULL;
frc::SpeedController* RobotMap::intakeSystemLeftIntake = NULL;
frc::SpeedController* RobotMap::intakeSystemRightIntake = NULL;
frc::DoubleSolenoid* RobotMap::intakeSystemDoubleSolenoid1 = NULL;
//DoubleSolenoid* RobotMap::canGrabberSolenoid = NULL;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
CANTalon* RobotMap::drivetrainSpeedController2 = NULL;
CANTalon* RobotMap::drivetrainSpeedController1 = NULL;
CANTalon* RobotMap::drivetrainSpeedController3 = NULL;
CANTalon* RobotMap::drivetrainSpeedController4 = NULL;
frc::RobotDrive* RobotMap::drivetrainRobotDrive = NULL;
CANTalon* RobotMap::clawPIDCANTalon = NULL;
CANTalon* RobotMap::clawMotor2 = NULL;
frc::Servo* RobotMap::testServo = NULL;
frc::Servo* RobotMap::testServo2 = NULL;

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	frc::LiveWindow* lw = frc::LiveWindow::GetInstance();

	drivetrainrearRight = new frc::Encoder(0, 1, false, frc::Encoder::k4X);
	lw->AddSensor("Drivetrain", "rearRight", drivetrainrearRight);
	drivetrainrearRight->SetDistancePerPulse(1.0);
//        drivetrainrearRight->SetPIDSourceParameter(frc::Encoder::kRate);
	drivetrainrearLeft = new frc::Encoder(2, 3, false, frc::Encoder::k4X);
	lw->AddSensor("Drivetrain", "rearLeft", drivetrainrearLeft);
	drivetrainrearLeft->SetDistancePerPulse(1.0);
//        drivetrainrearLeft->SetPIDSourceParameter(frc::Encoder::kRate);
	drivetrainfrontLeft = new frc::Encoder(4, 5, false, frc::Encoder::k4X);
	lw->AddSensor("Drivetrain", "frontLeft", drivetrainfrontLeft);
	drivetrainfrontLeft->SetDistancePerPulse(1.0);
//        drivetrainfrontLeft->SetPIDSourceParameter(frc::Encoder::kRate);
	drivetrainfrontRight = new frc::Encoder(6, 7, false, frc::Encoder::k4X);
	lw->AddSensor("Drivetrain", "frontRight", drivetrainfrontRight);
	drivetrainfrontRight->SetDistancePerPulse(1.0);
//        drivetrainfrontRight->SetPIDSourceParameter(frc::Encoder::kRate);
	drivetrainGyro1 = new frc::AnalogGyro(0);
//	lw->AddSensor("Drivetrain", "Gyro 1", drivetrainGyro1);
//	drivetrainGyro1->Gyro::SetSensitivity(0.007);
	clawPIDBottom = new frc::DigitalInput(10);
	lw->AddSensor("ClawPID", "Bottom", clawPIDBottom);
	
	clawPIDTop = new frc::DigitalInput(11);
	lw->AddSensor("ClawPID", "Top", clawPIDTop);
	
	clawPIDHeightEnccoder = new frc::Encoder(8, 9, false, frc::Encoder::k1X);
	lw->AddSensor("ClawPID", "Height Encoder", clawPIDHeightEnccoder);
	clawPIDHeightEnccoder->SetDistancePerPulse(1.0);
	clawPIDHeightEnccoder->SetPIDSourceType(frc::PIDSourceType::kRate);
	
	containerWinchContainerPull1 = new frc::Victor(2);
//	lw->AddActuator("Container Winch", "Container Pull 1", (Talon*) containerWinchContainerPull1);
	
	containerWinchContainerPull2 = new frc::Victor(3);
//	lw->AddActuator("Container Winch", "Container Pull 2", (Talon*) containerWinchContainerPull2);
	
	intakeSystemLeftIntake = new frc::Victor(0);
	lw->AddActuator("Intake System", "LeftIntake", (frc::Victor*) intakeSystemLeftIntake);
	
	intakeSystemRightIntake = new frc::Victor(1);
	lw->AddActuator("Intake System", "RightIntake", (frc::Victor*) intakeSystemRightIntake);
	
	intakeSystemDoubleSolenoid1 = new frc::DoubleSolenoid(7, 0, 1);
	lw->AddActuator("Intake System", "Double Solenoid 1", intakeSystemDoubleSolenoid1);
	
//	canGrabberSolenoid = new DoubleSolenoid(7, 2, 3);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

	drivetrainSpeedController2 = new CANTalon(1);
	lw->AddActuator("Drivetrain", "Speed Controller 2", (frc::TalonSRX*) drivetrainSpeedController2);

	drivetrainSpeedController1 = new CANTalon(3);
	lw->AddActuator("Drivetrain", "Speed Controller 1", (frc::TalonSRX*) drivetrainSpeedController1);

	drivetrainSpeedController3 = new CANTalon(5);
	lw->AddActuator("Drivetrain", "Speed Controller 3", (frc::TalonSRX*) drivetrainSpeedController3);

	drivetrainSpeedController4 = new CANTalon(6);
	lw->AddActuator("Drivetrain", "Speed Controller 4", (frc::TalonSRX*) drivetrainSpeedController4);

	drivetrainRobotDrive = new frc::RobotDrive(drivetrainSpeedController2, drivetrainSpeedController1,
              drivetrainSpeedController3, drivetrainSpeedController4);

	clawPIDCANTalon = new CANTalon(8);
	clawMotor2 = new CANTalon(2);

	testServo = new frc::Servo(6); //right
	testServo2 = new frc::Servo(7);

	drivetrainRobotDrive->SetSafetyEnabled(false);
	drivetrainRobotDrive->SetExpiration(0.5);
	drivetrainRobotDrive->SetSensitivity(0.5);
	drivetrainRobotDrive->SetMaxOutput(0.75);
}
