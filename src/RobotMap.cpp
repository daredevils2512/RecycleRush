// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::drivetrainSpeedController2 = NULL;
SpeedController* RobotMap::drivetrainSpeedController1 = NULL;
SpeedController* RobotMap::drivetrainSpeedController3 = NULL;
SpeedController* RobotMap::drivetrainSpeedController4 = NULL;
RobotDrive* RobotMap::drivetrainRobotDrive = NULL;
Encoder* RobotMap::drivetrainQuadratureEncoder1 = NULL;
Encoder* RobotMap::drivetrainQuadratureEncoder2 = NULL;
Encoder* RobotMap::drivetrainQuadratureEncoder3 = NULL;
Encoder* RobotMap::drivetrainQuadratureEncoder4 = NULL;
Gyro* RobotMap::drivetrainGyro1 = NULL;
Encoder* RobotMap::clawHeightEncoder = NULL;
SpeedController* RobotMap::clawClawMotor = NULL;
DigitalInput* RobotMap::clawLevel0 = NULL;
DigitalInput* RobotMap::clawLevel1 = NULL;
DigitalInput* RobotMap::clawLevel2 = NULL;
DigitalInput* RobotMap::clawLevel3 = NULL;
DigitalInput* RobotMap::clawLevel4 = NULL;
DigitalInput* RobotMap::clawLevel5 = NULL;
DigitalInput* RobotMap::clawLevel6 = NULL;
Encoder* RobotMap::clawPIDHeightEnccoder = NULL;
SpeedController* RobotMap::clawPIDClawMotor = NULL;
Relay* RobotMap::containerWinchContainerPull1 = NULL;
Relay* RobotMap::containerWinchContainerPull2 = NULL;
Relay* RobotMap::containerWinchContainerPull3 = NULL;
DigitalInput* RobotMap::containerWinchContainerSensor1 = NULL;
DigitalInput* RobotMap::containerWinchContainerSensor2 = NULL;
DigitalInput* RobotMap::containerWinchContainerSenser3 = NULL;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	drivetrainSpeedController2 = new Talon(1);
	lw->AddActuator("Drivetrain", "Speed Controller 2", (Talon*) drivetrainSpeedController2);
	
	drivetrainSpeedController1 = new Talon(0);
	lw->AddActuator("Drivetrain", "Speed Controller 1", (Talon*) drivetrainSpeedController1);
	
	drivetrainSpeedController3 = new Talon(2);
	lw->AddActuator("Drivetrain", "Speed Controller 3", (Talon*) drivetrainSpeedController3);
	
	drivetrainSpeedController4 = new Talon(3);
	lw->AddActuator("Drivetrain", "Speed Controller 4", (Talon*) drivetrainSpeedController4);
	
	drivetrainRobotDrive = new RobotDrive(drivetrainSpeedController1, drivetrainSpeedController2,
              drivetrainSpeedController3, drivetrainSpeedController4);
	
	drivetrainRobotDrive->SetSafetyEnabled(true);
        drivetrainRobotDrive->SetExpiration(0.1);
        drivetrainRobotDrive->SetSensitivity(0.5);
        drivetrainRobotDrive->SetMaxOutput(1.0);

	drivetrainQuadratureEncoder1 = new Encoder(0, 1, false, Encoder::k4X);
	lw->AddSensor("Drivetrain", "Quadrature Encoder 1", drivetrainQuadratureEncoder1);
	drivetrainQuadratureEncoder1->SetDistancePerPulse(1.0);
        drivetrainQuadratureEncoder1->SetPIDSourceParameter(Encoder::kRate);
	drivetrainQuadratureEncoder2 = new Encoder(2, 3, false, Encoder::k4X);
	lw->AddSensor("Drivetrain", "Quadrature Encoder 2", drivetrainQuadratureEncoder2);
	drivetrainQuadratureEncoder2->SetDistancePerPulse(1.0);
        drivetrainQuadratureEncoder2->SetPIDSourceParameter(Encoder::kRate);
	drivetrainQuadratureEncoder3 = new Encoder(4, 5, false, Encoder::k4X);
	lw->AddSensor("Drivetrain", "Quadrature Encoder 3", drivetrainQuadratureEncoder3);
	drivetrainQuadratureEncoder3->SetDistancePerPulse(1.0);
        drivetrainQuadratureEncoder3->SetPIDSourceParameter(Encoder::kRate);
	drivetrainQuadratureEncoder4 = new Encoder(6, 7, false, Encoder::k4X);
	lw->AddSensor("Drivetrain", "Quadrature Encoder 4", drivetrainQuadratureEncoder4);
	drivetrainQuadratureEncoder4->SetDistancePerPulse(1.0);
        drivetrainQuadratureEncoder4->SetPIDSourceParameter(Encoder::kRate);
	drivetrainGyro1 = new Gyro(1);
	lw->AddSensor("Drivetrain", "Gyro 1", drivetrainGyro1);
	drivetrainGyro1->SetSensitivity(0.007);
	clawHeightEncoder = new Encoder(8, 9, false, Encoder::k4X);
	lw->AddSensor("Claw", "Height Encoder", clawHeightEncoder);
	clawHeightEncoder->SetDistancePerPulse(1.0);
        clawHeightEncoder->SetPIDSourceParameter(Encoder::kRate);
	clawClawMotor = new Talon(4);
	lw->AddActuator("Claw", "Claw Motor", (Talon*) clawClawMotor);
	
	clawLevel0 = new DigitalInput(10);
	lw->AddSensor("Claw", "Level 0", clawLevel0);
	
	clawLevel1 = new DigitalInput(11);
	lw->AddSensor("Claw", "Level 1", clawLevel1);
	
	clawLevel2 = new DigitalInput(12);
	lw->AddSensor("Claw", "Level 2", clawLevel2);
	
	clawLevel3 = new DigitalInput(13);
	lw->AddSensor("Claw", "Level 3", clawLevel3);
	
	clawLevel4 = new DigitalInput(14);
	lw->AddSensor("Claw", "Level 4", clawLevel4);
	
	clawLevel5 = new DigitalInput(15);
	lw->AddSensor("Claw", "Level 5", clawLevel5);
	
	clawLevel6 = new DigitalInput(16);
	lw->AddSensor("Claw", "Level 6", clawLevel6);
	
	clawPIDHeightEnccoder = new Encoder(17, 18, false, Encoder::k4X);
	lw->AddSensor("ClawPID", "Height Enccoder", clawPIDHeightEnccoder);
	clawPIDHeightEnccoder->SetDistancePerPulse(1.0);
        clawPIDHeightEnccoder->SetPIDSourceParameter(Encoder::kDistance);
	clawPIDClawMotor = new Talon(5);
	lw->AddActuator("ClawPID", "Claw Motor", (Talon*) clawPIDClawMotor);
	
	containerWinchContainerPull1 = new Relay(0);
	lw->AddActuator("Container Winch", "Container Pull 1", containerWinchContainerPull1);
	
	containerWinchContainerPull2 = new Relay(1);
	lw->AddActuator("Container Winch", "Container Pull 2", containerWinchContainerPull2);
	
	containerWinchContainerPull3 = new Relay(2);
	lw->AddActuator("Container Winch", "Container Pull 3", containerWinchContainerPull3);
	
	containerWinchContainerSensor1 = new DigitalInput(19);
	lw->AddSensor("Container Winch", "Container Sensor 1", containerWinchContainerSensor1);
	
	containerWinchContainerSensor2 = new DigitalInput(20);
	lw->AddSensor("Container Winch", "Container Sensor 2", containerWinchContainerSensor2);
	
	containerWinchContainerSenser3 = new DigitalInput(21);
	lw->AddSensor("Container Winch", "Container Senser 3", containerWinchContainerSenser3);
	


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
