// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
Encoder* RobotMap::drivetrainrearRight = NULL;
Encoder* RobotMap::drivetrainrearLeft = NULL;
Encoder* RobotMap::drivetrainfrontLeft = NULL;
Encoder* RobotMap::drivetrainfrontRight = NULL;
Gyro* RobotMap::drivetrainGyro1 = NULL;
DigitalInput* RobotMap::clawPIDBottom = NULL;
DigitalInput* RobotMap::clawPIDTop = NULL;
Encoder* RobotMap::clawPIDHeightEnccoder = NULL;
Victor* RobotMap::containerWinchContainerPull1 = NULL;
Victor* RobotMap::containerWinchContainerPull2 = NULL;
SpeedController* RobotMap::intakeSystemLeftIntake = NULL;
SpeedController* RobotMap::intakeSystemRightIntake = NULL;
DoubleSolenoid* RobotMap::intakeSystemDoubleSolenoid1 = NULL;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
CANTalon* RobotMap::drivetrainSpeedController2 = NULL;
CANTalon* RobotMap::drivetrainSpeedController1 = NULL;
CANTalon* RobotMap::drivetrainSpeedController3 = NULL;
CANTalon* RobotMap::drivetrainSpeedController4 = NULL;
RobotDrive* RobotMap::drivetrainRobotDrive = NULL;
CANTalon* RobotMap::clawPIDCANTalon = NULL;
CANTalon* RobotMap::clawMotor2 = NULL;

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	drivetrainrearRight = new Encoder(0, 1, false, Encoder::k4X);
	lw->AddSensor("Drivetrain", "rearRight", drivetrainrearRight);
	drivetrainrearRight->SetDistancePerPulse(1.0);
        drivetrainrearRight->SetPIDSourceParameter(Encoder::kRate);
	drivetrainrearLeft = new Encoder(2, 3, false, Encoder::k4X);
	lw->AddSensor("Drivetrain", "rearLeft", drivetrainrearLeft);
	drivetrainrearLeft->SetDistancePerPulse(1.0);
        drivetrainrearLeft->SetPIDSourceParameter(Encoder::kRate);
	drivetrainfrontLeft = new Encoder(4, 5, false, Encoder::k4X);
	lw->AddSensor("Drivetrain", "frontLeft", drivetrainfrontLeft);
	drivetrainfrontLeft->SetDistancePerPulse(1.0);
        drivetrainfrontLeft->SetPIDSourceParameter(Encoder::kRate);
	drivetrainfrontRight = new Encoder(6, 7, false, Encoder::k4X);
	lw->AddSensor("Drivetrain", "frontRight", drivetrainfrontRight);
	drivetrainfrontRight->SetDistancePerPulse(1.0);
        drivetrainfrontRight->SetPIDSourceParameter(Encoder::kRate);
	drivetrainGyro1 = new Gyro(1);
	lw->AddSensor("Drivetrain", "Gyro 1", drivetrainGyro1);
	drivetrainGyro1->SetSensitivity(0.007);
	clawPIDBottom = new DigitalInput(10);
	lw->AddSensor("ClawPID", "Bottom", clawPIDBottom);
	
	clawPIDTop = new DigitalInput(11);
	lw->AddSensor("ClawPID", "Top", clawPIDTop);
	
	clawPIDHeightEnccoder = new Encoder(8, 9, false, Encoder::k1X);
	lw->AddSensor("ClawPID", "Height Enccoder", clawPIDHeightEnccoder);
	clawPIDHeightEnccoder->SetDistancePerPulse(1.0);
        clawPIDHeightEnccoder->SetPIDSourceParameter(Encoder::kDistance);
	
	containerWinchContainerPull1 = new Victor(2);
//	lw->AddActuator("Container Winch", "Container Pull 1", (Talon*) containerWinchContainerPull1);
	
	containerWinchContainerPull2 = new Victor(3);
//	lw->AddActuator("Container Winch", "Container Pull 2", (Talon*) containerWinchContainerPull2);
	
	intakeSystemLeftIntake = new Victor(0);
	lw->AddActuator("Intake System", "LeftIntake", (Victor*) intakeSystemLeftIntake);
	
	intakeSystemRightIntake = new Victor(1);
	lw->AddActuator("Intake System", "RightIntake", (Victor*) intakeSystemRightIntake);
	
	intakeSystemDoubleSolenoid1 = new DoubleSolenoid(0, 0, 1);      
	lw->AddActuator("Intake System", "Double Solenoid 1", intakeSystemDoubleSolenoid1);
	


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

	drivetrainSpeedController2 = new CANTalon(1);
	lw->AddActuator("Drivetrain", "Speed Controller 2", (TalonSRX*) drivetrainSpeedController2);

	drivetrainSpeedController1 = new CANTalon(3);
	lw->AddActuator("Drivetrain", "Speed Controller 1", (TalonSRX*) drivetrainSpeedController1);

	drivetrainSpeedController3 = new CANTalon(5);
	lw->AddActuator("Drivetrain", "Speed Controller 3", (TalonSRX*) drivetrainSpeedController3);

	drivetrainSpeedController4 = new CANTalon(6);
	lw->AddActuator("Drivetrain", "Speed Controller 4", (TalonSRX*) drivetrainSpeedController4);

	drivetrainRobotDrive = new RobotDrive(drivetrainSpeedController2, drivetrainSpeedController1,
              drivetrainSpeedController3, drivetrainSpeedController4);

	clawPIDCANTalon = new CANTalon(8);
	clawMotor2 = new CANTalon(2);

	drivetrainRobotDrive->SetSafetyEnabled(false);
	drivetrainRobotDrive->SetExpiration(0.5);
	drivetrainRobotDrive->SetSensitivity(0.5);
	drivetrainRobotDrive->SetMaxOutput(1.0);
}
